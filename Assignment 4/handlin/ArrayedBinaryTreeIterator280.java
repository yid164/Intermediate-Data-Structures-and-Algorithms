package lib280.tree;


// Name: Yinsheng Dong
// Student Number: 11148648
// NSID: yid164
// Lecture Section: CMPT 280
import lib280.base.LinearIterator280;
import lib280.exception.AfterTheEnd280Exception;
import lib280.exception.ContainerEmpty280Exception;
import lib280.exception.NoCurrentItem280Exception;

public class ArrayedBinaryTreeIterator280<I> extends ArrayedBinaryTreePosition280 implements LinearIterator280<I> {

	// This is a reference to the tree that created this iterator object.
	ArrayedBinaryTree280<I> tree;
	
	// An integer that represents the cursor position is inherited from
	// ArrayedBinaryTreePosition280.
	
	/**
	 * Create a new iterator from a given heap.
	 * @param t The heap for which to create a new iterator.
	 */
	public ArrayedBinaryTreeIterator280(ArrayedBinaryTree280<I> t) {
		super(t.currentNode);
		this.tree = t;
	}

	// TODO - Complete the following methods which are required by LinearIterator280<I>
	// Note that these method stubs were automatically generated by IntelliJ and every one of them
	// requires your attention.

	/**
	 *  if the current node is in the 0 position return true
	 * @return false otherwise
	 */
	/**
	 *
	 * @return true if the node is in the before, false otherwise
	 */
	@Override
	public boolean before() {
		if (currentNode == 0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/***
	 * if the current node is in the after tree position return true
	 * @return false otherwise
	 */
	@Override
	public boolean after() {
		if(currentNode > this.tree.count())
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 * @Pre can not go forth if the cursor is in the after position
	 * @throws AfterTheEnd280Exception
	 * cursor = cursor + 1
	 */
	@Override
	public void goForth() throws AfterTheEnd280Exception {
		if(after())
		{
			throw new AfterTheEnd280Exception("Can not go forth when cursor is in after position");
		}
		this.tree.currentNode++;
		currentNode++;
	}

	/***
	 * @Pre the tree cannot be empty
	 * @throws ContainerEmpty280Exception
	 */
	@Override
	public void goFirst() throws ContainerEmpty280Exception {
		if(this.tree.isEmpty())
		{
			throw new ContainerEmpty280Exception("Can not go first when the tree is empty");
		}
		this.tree.currentNode=1;
		currentNode=1;
	}

	/***
	 * make the node to the 0 position, it is the before position
	 */
	@Override
	public void goBefore() {
		this.tree.currentNode=0;
		currentNode=0;
	}

	/***
	 * make the node to the after position
	 */
	@Override
	public void goAfter() {
		this.tree.currentNode = this.tree.count+1;
		currentNode = this.tree.count+1;
	}

	/**
	 * @Pre item must exists
	 * @return the item that is in the current position
	 * @throws NoCurrentItem280Exception
	 */
	@Override
	public I item() throws NoCurrentItem280Exception {
		if(!itemExists())
		{
			throw new NoCurrentItem280Exception("There are no current item exists");
		}
		return this.tree.item();
	}

	/***
	 *
	 * @return true if the item exists, false otherwise
	 */
	@Override
	public boolean itemExists() {
		if(this.tree.itemExists())
		{
			return true;
		}
		else
		{
			return false;
		}
	}


}
